# coding: utf-8

"""
    Joinself restful-client API

    This is the api for Joinself restful client.

    The version of the OpenAPI document: 1.0
    Contact: support@swagger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictStr
from openapi_client.models.request_fact_request import RequestFactRequest
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class RequestCreateRequest(BaseModel):
    """
    RequestCreateRequest
    """ # noqa: E501
    callback: Optional[StrictStr] = None
    connection_self_id: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    facts: Optional[List[RequestFactRequest]] = None
    out_of_band: Optional[StrictBool] = None
    type: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["callback", "connection_self_id", "description", "facts", "out_of_band", "type"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of RequestCreateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in facts (list)
        _items = []
        if self.facts:
            for _item in self.facts:
                if _item:
                    _items.append(_item.to_dict())
            _dict['facts'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of RequestCreateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "callback": obj.get("callback"),
            "connection_self_id": obj.get("connection_self_id"),
            "description": obj.get("description"),
            "facts": [RequestFactRequest.from_dict(_item) for _item in obj.get("facts")] if obj.get("facts") is not None else None,
            "out_of_band": obj.get("out_of_band"),
            "type": obj.get("type")
        })
        return _obj


